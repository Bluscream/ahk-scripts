; Generated by AutoGUI 2.6.2
#SingleInstance Force
#NoEnv
; #Warn
SetWorkingDir %A_ScriptDir%
SetBatchLines -1

#Include %A_ScriptDir%\AutoXYWH.ahk
#Include <bluscream>
global no_ui := false

global color := makeColor(0, 0, 0, 0)
global editing := false
global last_edited := ""
gosub SetupGUI
OnClipboardChange("OnClipboardChanged")
Return

SetupGUI:
    Gui New, +Resize -MinimizeBox -MaximizeBox -SysMenu +AlwaysOnTop +ToolWindow -Caption -0x80000
    Gui Color, 0xE5E5E5
    Gui Add, Picture, hWndhimg_color vimg_color x8 y8 w223 h38 BackgroundTrans +Border ; , D:\Pictures\channels4_profile.jpg
    Gui Add, GroupBox, x8 y48 w228 h151, Color
    Gui Add, Text, x16 y72 w86 h23 +0x200, RGBA
    Gui Add, Edit, hWndhEdtValue vtxt_rgba gOnTxtEdited x112 y72 w120 h24 -VScroll
    Gui Add, Text, x16 y104 w14 h23 +0x200, R
    Gui Add, Edit, hWndhEdtValue2 vtxt_r x32 y104 w27 h21 -VScroll
    Gui Add, Text, x64 y104 w11 h23 +0x200, G
    Gui Add, Edit, hWndhEdtValue3 vtxt_g x80 y104 w25 h21 -VScroll
    Gui Add, Text, x112 y104 w14 h23 +0x200, B
    Gui Add, Edit, hWndhEdtValue4 vtxt_b x136 y104 w26 h21 -VScroll
    Gui Add, Text, x176 y104 w15 h23 +0x200, A
    Gui Add, Edit, hWndhEdtValue5 vtxt_a x200 y104 w32 h21 -VScroll
    Gui Add, Text, x16 y136 w54 h23 +0x200, HexRGB
    Gui Add, Edit, hWndhEdtValue6 vtxt_hexrgb x72 y136 w65 h21 -VScroll +ReadOnly
    Gui Add, Text, x144 y136 w31 h23 +0x200, HexA
    Gui Add, Edit, hWndhEdtValue7 vtxt_hexa x184 y136 w48 h21 -VScroll +ReadOnly
    Gui Add, Text, x16 y168 w80 h23 +0x200, HexRGBA
    Gui Add, Edit, hWndhEdtValue8 vtxt_hexrgba x104 y168 w120 h21 -VScroll +ReadOnly

    GuiWidth := 244
    Guixpos := A_ScreenWidth - GuiWidth - 60
    Gui, Show, y60 x%Guixpos% h205 w%GuiWidth%, IW Color Converter
    return


OnTxtEdited(CtrlHwnd, GuiEvent, EventInfo, ErrLevel := "") {
    global editing
    global last_edited
    global color
    cntrl := A_GuiControl
    GuiControlGet, content,, % cntrl
    ; content := cntrl
    scriptlog("OnTxtEdited( CtrlHwnd: " . toJson(CtrlHwnd) . " | GuiEvent: " . toJson(GuiEvent) . " | EventInfo: " . toJson(EventInfo) . " | ErrLevel: " . toJson(ErrLevel) . " | A_GuiControl: " . toJson(A_GuiControl) . " | cntrl: " . toJson(cntrl) . " | content: " . toJson(content) . " | editing: " . toJson(editing) . " | last_edited: " . toJson(last_edited) . " | test: " . toJson(test) . " | color: " . toJson(color) )
    ; if (last_edited == cntrl) {
    ;     return
    ; }
    last_edited := cntrl
    if (editing) {
        return
    }
    editing := true
    if (cntrl == "txt_rgba") {
        color := parseColor(content)
    }
    else if (cntrl == "txt_r") {
        color := makeColor(content, color.g, color.b, color.a)
    }
    else if (cntrl == "txt_g") {
        color := makeColor(color.r, content, color.b, color.a)
    }
    else if (cntrl == "txt_b") {
        color := makeColor(color.r, color.g, content, color.a)
    }
    else if (cntrl == "txt_a") {
        color := makeColor(color.r, color.g, color.b, content)
    }
    ; else if (cntrl == "txt_hexrgb") {

    ; }
    ; else if (cntrl == "txt_hexa") {

    ; }
    ; else if (cntrl == "txt_hexrgba") {

    ; }
    else {
        return
    }
    SetFields(a)
    ; editing := false
}

SetFields(a) {
    global editing
    global color
    scriptlog("SetFields(color=" . toJson(color) . ",editing=" . toJson(editing) . ",txt_r=" . toJson(txt_r) . ")")
    ; if (!editing) {
    ;     return
    ; }
    editing := true
    ; Gui Add, Edit, hWndhEdtValue vtxt_rgba gOnTxtEdited x112 y72 w120 h24 -VScroll
    ; Gui Add, Edit, hWndhEdtValue2 vtxt_r gOnTxtEdited x32 y104 w27 h21 -VScroll
    GuiControl,, % "txt_r", % color.r
    ; Gui Add, Edit, hWndhEdtValue3 vtxt_g gOnTxtEdited x80 y104 w25 h21 -VScroll
    GuiControl,,txt_g, % color.g
    ; Gui Add, Edit, hWndhEdtValue4 vtxt_b gOnTxtEdited x136 y104 w26 h21 -VScroll
    GuiControl,,txt_b, % color.b
    ; Gui Add, Edit, hWndhEdtValue5 vtxt_a gOnTxtEdited x200 y104 w32 h21 -VScroll
    GuiControl,,txt_a, % color.a
    ; Gui Add, Edit, hWndhEdtValue6 vtxt_hexrgb gOnTxtEdited x72 y136 w65 h21 -VScroll
    GuiControl,,txt_hexrgb, % color.hexrgb
    ; Gui Add, Edit, hWndhEdtValue7 vtxt_hexa gOnTxtEdited x184 y136 w48 h21 -VScroll
    GuiControl,,txt_hexa, % color.hexa
    ; Gui Add, Edit, hWndhEdtValue8 vtxt_hexrgba gOnTxtEdited x104 y168 w120 h21 -VScroll
    GuiControl,,txt_hexrgba, % color.hexrgba
    GuiControl, Color, img_color, % color.hexrgba
    editing := false
}

OnClipboardChanged(Type) {
    global color
    global editing
    if (Type != 1) {
        return
    }
    if (editing) {
        return
    }
    color1 := parseColor(Clipboard)
    if (color1 != null)
    {
        scriptlog("OnClipboardChanged(color=" . toJson(color1))
        color := color1
        ; Clipboard :=
        SetFields(a)
        ShowToolTip(toJson(color, True), 1500)
    }
}

GuiSize(GuiHwnd, EventInfo, Width, Height) {
    If (A_EventInfo == 1) {
        Return
    }

    AutoXYWH("xywh", hPicChannels4_profile)
    AutoXYWH("xywh", hEdtValue)
    AutoXYWH("xywh", hEdtValue2)
    AutoXYWH("xywh", hEdtValue3)
    AutoXYWH("xywh", hEdtValue4)
    AutoXYWH("xywh", hEdtValue5)
    AutoXYWH("xywh", hEdtValue6)
    AutoXYWH("xywh", hEdtValue7)
    AutoXYWH("xywh", hEdtValue8)
}

GuiEscape(GuiHwnd) {
    GuiClose(GuiHwnd)
}
GuiClose(GuiHwnd) {
    ExitApp
}

makeColor(r,g,b,a) {
    scriptlog("makeColor(" . toJson(r) . "," . toJson(g) . "," . toJson(b) . "," . toJson(a) . ")")
    color := {}
    ; color["str"] := ClipboardColor
    ; color["c"] := ret ; StrSplit(color["str"], ",")
    color["r"]  := r
    color["g"]  := g
    color["b"]  := b
    color["a"]  := a
    color["hexr"] := decimal2hex(color.r)
    color["hexg"] := decimal2hex(color.g)
    color["hexb"] := decimal2hex(color.b)
    color["hexa"] := decimal2hex(color.a)
    color["hexrgb"] := rgb2hex(color.hexr,color.hexg,color.hexb)
    color["hexrgba"] := rgb2hex(color.hexr,color.hexg,color.hexb) . " " . color.hexa
    ; MsgBox % toJson(color, True)
    return color
}
parseColor(str)
{
    ; Get the clipboard contents

    ; Match the RGB color format
    matches := regexMatchAll(str, "O)(?<nr>(\d+)(,\d{1,2}|\.\d{1,2})?)")
    if matches.Count() > 2 and matches.Count() < 5 {
        ret := []
        for i, match in matches {
            ret.push(match.Value(1))
            ; scriptlog("i: "+i)
            ; scriptlog("matches[i]: "+matches[i])
            ; scriptlog("match: "+match)
            ; scriptlog("matches[match]: "+matches[match])
            ; scriptlog("toJson(i): "+toJson(i))
            ; scriptlog("toJson(matches[i]: "+toJson(matches[i]))
            ; scriptlog("toJson(match): "+toJson(match))
            ; scriptlog("toJson(match.Count()): "+toJson(match.Count()))
            ; scriptlog("toJson(match.Name(0)): "+toJson(match.Name(0)))
            ; scriptlog("toJson(match.Value(0)): "+toJson(match.Value(0)))
            ; scriptlog("toJson(match.Name(1)): "+toJson(match.Name(1)))
            ; scriptlog("toJson(match.Value(1)): "+toJson(match.Value(1)))
            ; scriptlog("toJson(match[""nr""]): "+toJson(match["nr"]))
        }
        return makeColor(ret[1], ret[2], ret[3], ret[4])
    }
    return null
}
